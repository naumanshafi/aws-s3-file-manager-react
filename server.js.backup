require('dotenv').config({
  path: process.env.NODE_ENV === 'production' ? '.env.production' : '.env.local'
});

const express = require('express');
const cors = require('cors');
const { S3Client, ListObjectsV2Command, PutObjectCommand, DeleteObjectCommand, GetObjectCommand } = require('@aws-sdk/client-s3');
const { STSClient, AssumeRoleCommand } = require('@aws-sdk/client-sts');
const { getSignedUrl } = require('@aws-sdk/s3-request-presigner');
const multer = require('multer');
const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

const app = express();
const PORT = process.env.BACKEND_PORT || process.env.PORT || 5001;

// Log environment and port information
console.log('🌍 Environment:', process.env.NODE_ENV || 'development');
console.log('🔌 Port source:', process.env.PORT ? 'Environment variable' : 'Default fallback');
console.log('🚪 Selected PORT:', PORT);

// AWS Configuration from environment variables
const AWS_CONFIG = {
  region: process.env.AWS_REGION || 'us-east-1',
  accessKeyId: process.env.AWS_ACCESS_KEY_ID,
  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  roleArn: process.env.AWS_ROLE_ARN,
  bucketName: process.env.AWS_S3_BUCKET_NAME,
  sessionName: process.env.AWS_SESSION_NAME || 'S3FileManagerSession'
};

// Validate required environment variables
const requiredEnvVars = ['AWS_ACCESS_KEY_ID', 'AWS_SECRET_ACCESS_KEY', 'AWS_S3_BUCKET_NAME'];
const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);

if (missingVars.length > 0) {
  console.error('❌ Missing required environment variables:', missingVars);
  console.error('Please set the following environment variables:');
  missingVars.forEach(varName => console.error(`  - ${varName}`));
  process.exit(1);
}

console.log('✅ AWS Configuration loaded from environment variables');
console.log('📋 Configuration:', {
  region: AWS_CONFIG.region,
  bucketName: AWS_CONFIG.bucketName,
  roleArn: AWS_CONFIG.roleArn ? 'Configured' : 'Not set',
  accessKeyId: AWS_CONFIG.accessKeyId ? `${AWS_CONFIG.accessKeyId.substring(0, 8)}...` : 'Missing'
});

// Configure multer for file uploads
const upload = multer({ storage: multer.memoryStorage() });

// Enable CORS with dynamic origins based on environment
const allowedOrigins = process.env.NODE_ENV === 'production' 
  ? [
      'http://localhost:5000', 
      'http://localhost', 
      'https://104.198.177.87:5000',
      'https://104.198.177.87'
    ]
  : [
      'http://localhost:3000',
      'http://localhost:5000',
      'http://127.0.0.1:3000',
      'http://127.0.0.1:5000'
    ];

app.use(cors({
  origin: allowedOrigins,
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));

app.use(express.json());

// Serve static files from React build directory
app.use(express.static(path.join(__dirname, 'build')));

let s3Client = null;
let bucketName = AWS_CONFIG.bucketName;
let tokenExpirationTime = null;
let isInitialized = false;

// Helper function to check if tokens are expired
function areTokensExpired() {
  if (!tokenExpirationTime) return false;
  return Date.now() > tokenExpirationTime;
}

// Helper function to handle expired token errors
function handleExpiredTokenError(res, error) {
  if (error.name === 'TokenRefreshRequired' || 
      error.message.includes('token has expired') || 
      error.message.includes('security token included in the request is expired') ||
      error.Code === 'TokenRefreshRequired' ||
      error.Code === 'ExpiredToken' ||
      areTokensExpired()) {
    console.log('🔒 Tokens have expired, reinitializing...');
    s3Client = null;
    isInitialized = false;
    return res.status(401).json({ 
      error: 'TOKEN_EXPIRED',
      message: 'Session has expired. Reinitializing...',
      expired: true 
    });
  }
  return null; // Not an expired token error
}

// Initialize S3 client with environment variables
async function initializeS3Client() {
  if (isInitialized && s3Client && !areTokensExpired()) {
    console.log('✅ Using existing S3 client');
    return true;
  }

  try {
    console.log('🔄 Initializing S3 client...');
    
    // If roleArn is provided, assume the role
    if (AWS_CONFIG.roleArn) {
      console.log('🔐 Assuming role:', AWS_CONFIG.roleArn);
      
      // Create STS client with base credentials
      const stsClient = new STSClient({
        region: AWS_CONFIG.region,
        credentials: {
          accessKeyId: AWS_CONFIG.accessKeyId,
          secretAccessKey: AWS_CONFIG.secretAccessKey,
        },
      });
      
      // Try different session durations starting with the shortest
      const durations = [900, 1800, 3600]; // 15 min, 30 min, 1 hour
      let assumeRoleResponse = null;
      let lastError = null;
      
      for (const duration of durations) {
        try {
          console.log(`⏱️ Trying to assume role with ${duration} seconds duration...`);
          const assumeRoleCommand = new AssumeRoleCommand({
            RoleArn: AWS_CONFIG.roleArn,
            RoleSessionName: AWS_CONFIG.sessionName,
            DurationSeconds: duration,
          });
          
          assumeRoleResponse = await stsClient.send(assumeRoleCommand);
          console.log(`✅ Successfully assumed role with ${duration} seconds duration`);
          
          // Store token expiration time
          tokenExpirationTime = Date.now() + (duration * 1000);
          console.log('🕒 Tokens will expire at:', new Date(tokenExpirationTime).toISOString());
          break;
        } catch (error) {
          console.log(`❌ Failed with ${duration} seconds:`, error.message);
          lastError = error;
          if (!error.message.includes('DurationSeconds exceeds')) {
            // If it's not a duration error, no point trying other durations
            throw error;
          }
        }
      }
      
      if (!assumeRoleResponse) {
        console.error('❌ Failed to assume role with any duration');
        throw lastError || new Error('Failed to assume role');
      }
      
      const tempCredentials = assumeRoleResponse.Credentials;
      
      // Create S3 client with temporary credentials
      s3Client = new S3Client({
        region: AWS_CONFIG.region,
        credentials: {
          accessKeyId: tempCredentials.AccessKeyId,
          secretAccessKey: tempCredentials.SecretAccessKey,
          sessionToken: tempCredentials.SessionToken,
        },
      });
      
      console.log('✅ Successfully created S3 client with assumed role');
    } else {
      console.log('🔑 Using direct credentials (no role assumption)');
      // Clear token expiration since we're using permanent credentials
      tokenExpirationTime = null;
      
      // Use credentials directly
      s3Client = new S3Client({
        region: AWS_CONFIG.region,
        credentials: {
          accessKeyId: AWS_CONFIG.accessKeyId,
          secretAccessKey: AWS_CONFIG.secretAccessKey,
        },
      });
    }
    
    isInitialized = true;
    console.log('🚀 S3 client initialization completed successfully');
    return true;
  } catch (error) {
    console.error('❌ S3 initialization error:', error);
    s3Client = null;
    isInitialized = false;
    throw error;
  }
}

// Middleware to ensure S3 client is initialized
async function ensureS3Client(req, res, next) {
  try {
    if (!isInitialized || areTokensExpired()) {
      await initializeS3Client();
    }
    next();
  } catch (error) {
    console.error('❌ Failed to initialize S3 client:', error);
    res.status(500).json({ 
      error: 'AWS_INITIALIZATION_FAILED',
      message: 'Failed to initialize AWS connection. Please check server configuration.',
      details: error.message 
    });
  }
}

// Initialize S3 client on server startup
initializeS3Client().catch(error => {
  console.error('❌ Failed to initialize S3 client on startup:', error);
});

// Get current configuration endpoint
app.get('/api/s3/config', (req, res) => {
  res.json({
    bucketName: AWS_CONFIG.bucketName,
    region: AWS_CONFIG.region,
    hasRole: !!AWS_CONFIG.roleArn,
    isInitialized,
    tokenExpires: tokenExpirationTime ? new Date(tokenExpirationTime).toISOString() : null
  });
});

// Test connection by listing top-level folders
app.get('/api/s3/test', ensureS3Client, async (req, res) => {
  try {
    const command = new ListObjectsV2Command({
      Bucket: bucketName,
      Delimiter: '/',
    });
    
    const response = await s3Client.send(command);
    const folders = [];
    
    if (response.CommonPrefixes) {
      for (const prefix of response.CommonPrefixes) {
        if (prefix.Prefix) {
          const folderName = prefix.Prefix.replace('/', '');
          folders.push({
            name: folderName,
            path: prefix.Prefix,
          });
        }
      }
    }
    
    res.json({ 
      success: true, 
      folders: folders.sort((a, b) => a.name.localeCompare(b.name)),
      count: folders.length 
    });
  } catch (error) {
    console.error('S3 test error:', error);
    
    // Check if this is an expired token error
    const expiredResponse = handleExpiredTokenError(res, error);
    if (expiredResponse) return expiredResponse;
    
    res.status(500).json({ error: error.message });
  }
});

// List folders
app.get('/api/s3/folders', ensureS3Client, async (req, res) => {
  try {
    const { prefix = '' } = req.query;
    const normalizedPrefix = prefix && !prefix.endsWith('/') ? prefix + '/' : prefix;
    
    const command = new ListObjectsV2Command({
      Bucket: bucketName,
      Prefix: normalizedPrefix,
      Delimiter: '/',
    });
    
    const response = await s3Client.send(command);
    const folders = [];
    
    if (response.CommonPrefixes) {
      for (const folderPrefix of response.CommonPrefixes) {
        if (folderPrefix.Prefix) {
          const folderPath = folderPrefix.Prefix;
          const folderName = folderPath.split('/').slice(-2, -1)[0];
          folders.push({
            name: folderName,
            path: folderPath,
          });
        }
      }
    }
    
    res.json(folders.sort((a, b) => a.name.localeCompare(b.name)));
  } catch (error) {
    console.error('List folders error:', error);
    
    // Check if this is an expired token error
    const expiredResponse = handleExpiredTokenError(res, error);
    if (expiredResponse) return expiredResponse;
    
    res.status(500).json({ error: error.message });
  }
});

// List files
app.get('/api/s3/files', ensureS3Client, async (req, res) => {
  try {
    const { prefix = '' } = req.query;
    const normalizedPrefix = prefix && !prefix.endsWith('/') ? prefix + '/' : prefix;
    
    const command = new ListObjectsV2Command({
      Bucket: bucketName,
      Prefix: normalizedPrefix,
    });
    
    const response = await s3Client.send(command);
    const files = [];
    
    if (response.Contents) {
      for (const obj of response.Contents) {
        if (obj.Key && !obj.Key.endsWith('/')) {
          files.push({
            key: obj.Key,
            size: obj.Size || 0,
            lastModified: obj.LastModified || new Date(),
            etag: obj.ETag,
          });
        }
      }
    }
    
    res.json(files.sort((a, b) => new Date(b.lastModified) - new Date(a.lastModified)));
  } catch (error) {
    console.error('List files error:', error);
    
    // Check if this is an expired token error
    const expiredResponse = handleExpiredTokenError(res, error);
    if (expiredResponse) return expiredResponse;
    
    res.status(500).json({ error: error.message });
  }
});

// Upload file
app.post('/api/s3/upload', ensureS3Client, upload.single('file'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: 'No file provided' });
    }
    
    const { key } = req.body;
    
    const command = new PutObjectCommand({
      Bucket: bucketName,
      Key: key,
      Body: req.file.buffer,
      ContentType: req.file.mimetype,
    });
    
    await s3Client.send(command);
    res.json({ success: true, message: 'File uploaded successfully' });
  } catch (error) {
    console.error('Upload error:', error);
    
    // Check if this is an expired token error
    const expiredResponse = handleExpiredTokenError(res, error);
    if (expiredResponse) return expiredResponse;
    
    res.status(500).json({ error: error.message });
  }
});

// Delete file
app.delete('/api/s3/delete', ensureS3Client, async (req, res) => {
  try {
    const { key } = req.body;
    
    if (!key) {
      return res.status(400).json({ error: 'File key is required' });
    }
    
    const command = new DeleteObjectCommand({
      Bucket: bucketName,
      Key: key,
    });
    
    await s3Client.send(command);
    res.json({ success: true, message: 'File deleted successfully' });
  } catch (error) {
    console.error('Delete error:', error);
    
    // Check if this is an expired token error
    const expiredResponse = handleExpiredTokenError(res, error);
    if (expiredResponse) return expiredResponse;
    
    res.status(500).json({ error: error.message });
  }
});

// Generate presigned URL
app.post('/api/s3/presigned', ensureS3Client, async (req, res) => {
  try {
    const { key, expiresIn = 3600 } = req.body;
    
    if (!key) {
      return res.status(400).json({ error: 'File key is required' });
    }
    
    // Extract filename from key for Content-Disposition header
    const fileName = key.split('/').pop() || 'download';
    
    // Sanitize filename to prevent issues
    const sanitizedFileName = fileName.replace(/[^a-zA-Z0-9._-]/g, '_');
    
    const command = new GetObjectCommand({
      Bucket: bucketName,
      Key: key,
      ResponseContentDisposition: `attachment; filename="${sanitizedFileName}"`,
      ResponseCacheControl: 'no-cache, no-store, must-revalidate',
      ResponseContentType: 'application/octet-stream', // Force download by setting generic binary type
    });
    
    const url = await getSignedUrl(s3Client, command, { expiresIn });
    
    console.log(`Generated presigned URL for download: ${fileName}`);
    
    res.json({ url });
  } catch (error) {
    console.error('Presigned URL error:', error);
    
    // Check if this is an expired token error
    const expiredResponse = handleExpiredTokenError(res, error);
    if (expiredResponse) return expiredResponse;
    
    res.status(500).json({ error: error.message });
  }
});

// Schema validation endpoint
app.post('/api/schema/validate', upload.fields([
  { name: 'schema', maxCount: 1 },
  { name: 'data', maxCount: 1 }
]), async (req, res) => {
  let schemaFilePath = null;
  let dataFilePath = null;
  
  try {
    if (!req.files || !req.files.schema || !req.files.data) {
      return res.status(400).json({ 
        error: 'Both schema and data files are required' 
      });
    }
    
    const schemaFile = req.files.schema[0];
    const dataFile = req.files.data[0];
    
    // Create temporary files
    const tempDir = path.join(__dirname, 'temp');
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    
    const timestamp = Date.now();
    schemaFilePath = path.join(tempDir, `schema_${timestamp}.json`);
    dataFilePath = path.join(tempDir, `data_${timestamp}.json`);
    
    // Write uploaded files to temporary location
    fs.writeFileSync(schemaFilePath, schemaFile.buffer);
    fs.writeFileSync(dataFilePath, dataFile.buffer);
    
    // Call Python validation script
    const pythonScript = path.join(__dirname, 'schema_validator.py');
    const pythonPath = path.join(__dirname, 'venv', 'bin', 'python');
    const pythonProcess = spawn(pythonPath, [pythonScript, schemaFilePath, dataFilePath]);
    
    let output = '';
    let errorOutput = '';
    
    pythonProcess.stdout.on('data', (data) => {
      output += data.toString();
    });
    
    pythonProcess.stderr.on('data', (data) => {
      errorOutput += data.toString();
    });
    
    pythonProcess.on('close', (code) => {
      // Clean up temporary files
      try {
        if (fs.existsSync(schemaFilePath)) fs.unlinkSync(schemaFilePath);
        if (fs.existsSync(dataFilePath)) fs.unlinkSync(dataFilePath);
      } catch (cleanupError) {
        console.error('Error cleaning up temp files:', cleanupError);
      }
      
      if (code === 0) {
        try {
          const result = JSON.parse(output);
          res.json(result);
        } catch (parseError) {
          console.error('Error parsing Python output:', parseError);
          res.status(500).json({ 
            error: 'Failed to parse validation results',
            details: output 
          });
        }
      } else {
        console.error('Python script error:', errorOutput);
        res.status(500).json({ 
          error: 'Schema validation failed',
          details: errorOutput || output 
        });
      }
    });
    
    pythonProcess.on('error', (error) => {
      console.error('Failed to start Python process:', error);
      
      // Clean up temporary files
      try {
        if (fs.existsSync(schemaFilePath)) fs.unlinkSync(schemaFilePath);
        if (fs.existsSync(dataFilePath)) fs.unlinkSync(dataFilePath);
      } catch (cleanupError) {
        console.error('Error cleaning up temp files:', cleanupError);
      }
      
      res.status(500).json({ 
        error: 'Failed to execute validation script',
        details: error.message 
      });
    });
    
  } catch (error) {
    console.error('Schema validation error:', error);
    
    // Clean up temporary files
    try {
      if (schemaFilePath && fs.existsSync(schemaFilePath)) fs.unlinkSync(schemaFilePath);
      if (dataFilePath && fs.existsSync(dataFilePath)) fs.unlinkSync(dataFilePath);
    } catch (cleanupError) {
      console.error('Error cleaning up temp files:', cleanupError);
    }
    
    res.status(500).json({ error: error.message });
  }
});

// Health check
app.get('/health', (req, res) => {
  res.json({ status: 'OK', message: 'S3 API server is running' });
});

// Catch-all handler: send back React's index.html file for any non-API routes
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'build', 'index.html'));
});

app.listen(PORT, '0.0.0.0', () => {
  console.log(`🚀 S3 API server running on http://127.0.0.1:${PORT}`);
  console.log(`📡 Accessible at http://localhost:${PORT}`);
}); 